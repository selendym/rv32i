<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2183px" height="2163px" viewBox="-0.5 -0.5 2183 2163" style="background-color: rgb(255, 255, 255);"><defs/><g><rect x="0" y="160" width="1060" height="1840" fill="#ffffff" stroke="#000000" stroke-width="2" pointer-events="none"/><g transform="translate(-0.5,159.5)scale(2)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="529" height="919" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: &quot;Courier New&quot;; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 530px; height: 920px; overflow: hidden; white-space: nowrap;"><p style="margin: 0px ; margin-top: 4px ; text-align: center">class <b>Cpu</b></p><hr size="1" /><p style="margin: 0px ; margin-left: 4px"><span>// TYPE, CONSTEXPR MEMBERS</span><br /></p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    static constexpr auto iword_length = isa::iword_length;</p><p style="margin: 0px ; margin-left: 4px">    static constexpr auto word_length  = isa::word_length;</p><p style="margin: 0px ; margin-left: 4px">    static constexpr auto reg_count    = isa::reg_count;</p><p style="margin: 0px ; margin-left: 4px">    static constexpr auto reg_0_value  = isa::reg_0_value;</p><p style="margin: 0px ; margin-left: 4px">    using iword_t   = isa::iword_t;</p><p style="margin: 0px ; margin-left: 4px">    using word_t    = isa::word_t;</p><p style="margin: 0px ; margin-left: 4px">    using addr_t    = isa::addr_t;</p><p style="margin: 0px ; margin-left: 4px">    using instr_t   = isa::instr_t;</p><p style="margin: 0px ; margin-left: 4px">    using reg_arr_t = isa::reg_arr_t;</p><p style="margin: 0px ; margin-left: 4px">    using reg_idx_t = isa::reg_idx_t;</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// DATA MEMBERS</p><p style="margin: 0px ; margin-left: 4px">private:</p><p style="margin: 0px ; margin-left: 4px">    reg_arr_t         reg_arr      = { reg_0_value, 0, STACK_START_ADDR };</p><p style="margin: 0px ; margin-left: 4px">    word_t           &amp;sp_reg       = reg_arr[ isa::reg_idx_ns::sp ];</p><p style="margin: 0px ; margin-left: 4px">    word_t            pc_reg       = ENTRY_POINT_ADDR;</p><p style="margin: 0px ; margin-left: 4px">    const std::string mem_img_path = MEM_IMG_PATH;</p><p style="margin: 0px ; margin-left: 4px">    memory::Memory    mem          = memory::Memory( mem_img_path );</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// CONSTRUCTOR, DESTRUCTOR DECLARATIONS</p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    // Cpu();</p><p style="margin: 0px ; margin-left: 4px">    explicit Cpu( word_t pc_reg = ENTRY_POINT_ADDR,</p><p style="margin: 0px ; margin-left: 4px">                  word_t sp_reg = STACK_START_ADDR,</p><p style="margin: 0px ; margin-left: 4px">                  const std::string &amp;mem_img_path = MEM_IMG_PATH );</p><p style="margin: 0px ; margin-left: 4px">    ~Cpu();</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// PUBLIC MEMBER-FUNCTION DECLARATIONS</p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    const reg_arr_t &amp;get_reg_arr() const;</p><p style="margin: 0px ; margin-left: 4px">    const word_t &amp;get_reg( reg_idx_t index ) const;</p><p style="margin: 0px ; margin-left: 4px">    const word_t &amp;get_sp_reg() const;</p><p style="margin: 0px ; margin-left: 4px">    const word_t &amp;get_pc_reg() const;</p><p style="margin: 0px ; margin-left: 4px">    void set_reg_arr( const reg_arr_t &amp;reg_arr );</p><p style="margin: 0px ; margin-left: 4px">    void set_reg( reg_idx_t index, word_t value );</p><p style="margin: 0px ; margin-left: 4px">    void set_sp_reg( word_t value );</p><p style="margin: 0px ; margin-left: 4px">    void set_pc_reg( word_t value );</p><p style="margin: 0px ; margin-left: 4px">    void step();</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// PRIVATE MEMBER-FUNCTION DECLARATIONS</p><p style="margin: 0px ; margin-left: 4px">private:</p><p style="margin: 0px ; margin-left: 4px">    iword_t fetch() const;</p><p style="margin: 0px ; margin-left: 4px">    iword_t load_iword( addr_t addr ) const;</p><p style="margin: 0px ; margin-left: 4px">    void execute( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void arith_r( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void load( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void fence( instr_t instr ) const;  // FIX; currently no-op</p><p style="margin: 0px ; margin-left: 4px">    void arith_i( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void jalr( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void system( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void ecall();</p><p style="margin: 0px ; margin-left: 4px">    void store( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void branch( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void auipc( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void lui( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void jal( instr_t instr );</p><p style="margin: 0px ; margin-left: 4px">    void _illegal( instr_t instr ) const;</p></div></foreignObject><text x="264" y="465" fill="#000000" text-anchor="middle" font-size="12px" font-family="Courier New">[Not supported by viewer]</text></switch></g><rect x="1200" y="550" width="980" height="1060" fill="#ffffff" stroke="#000000" stroke-width="2" pointer-events="none"/><g transform="translate(1199.5,549.5)scale(2)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="489" height="529" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: &quot;Courier New&quot;; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 490px; height: 530px; overflow: hidden; white-space: nowrap;"><p style="margin: 0px ; margin-top: 4px ; text-align: center">class <b>Memory</b></p><hr size="1" /><p style="margin: 0px ; margin-left: 4px"><span>// TYPE, CONSTEXPR MEMBERS</span><br /></p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    static constexpr auto addr_length = isa::addr_length;</p><p style="margin: 0px ; margin-left: 4px">    using addr_t   = isa::addr_t;</p><p style="margin: 0px ; margin-left: 4px">    using uint8_t  = isa::uint8_t;</p><p style="margin: 0px ; margin-left: 4px">    using uint16_t = isa::uint16_t;</p><p style="margin: 0px ; margin-left: 4px">    using uint32_t = isa::uint32_t;</p><p style="margin: 0px ; margin-left: 4px">    using uint64_t = isa::uint64_t;</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// DATA MEMBERS</p><p style="margin: 0px ; margin-left: 4px">private:</p><p style="margin: 0px ; margin-left: 4px">    uint8_t *mem_carr;  // memory array; memory-mapped c-style array</p><p style="margin: 0px ; margin-left: 4px">    addr_t   mem_size;  // memory array size</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// CONSTRUCTOR, DESTRUCTOR DECLARATIONS</p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    explicit Memory( const std::string &amp;file_path );</p><p style="margin: 0px ; margin-left: 4px">    ~Memory();</p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">    </p><p style="margin: 0px ; margin-left: 4px">// PUBLIC MEMBER-FUNCTION DECLARATIONS</p><p style="margin: 0px ; margin-left: 4px">public:</p><p style="margin: 0px ; margin-left: 4px">    const uint8_t *get_mem_carr( addr_t addr = 0 ) const;</p><p style="margin: 0px ; margin-left: 4px">    uint8_t       *get_mem_carr_nc( addr_t addr = 0 );  // non-const</p><p style="margin: 0px ; margin-left: 4px">    const addr_t  &amp;get_mem_size() const;</p><p style="margin: 0px ; margin-left: 4px">    uint8_t  lb( addr_t addr ) const;</p><p style="margin: 0px ; margin-left: 4px">    uint16_t lh( addr_t addr ) const;</p><p style="margin: 0px ; margin-left: 4px">    uint32_t lw( addr_t addr ) const;</p><p style="margin: 0px ; margin-left: 4px">    uint64_t ld( addr_t addr ) const;  // rv64i</p><p style="margin: 0px ; margin-left: 4px">    void sb( addr_t addr, uint8_t  word8 );</p><p style="margin: 0px ; margin-left: 4px">    void sh( addr_t addr, uint16_t word16 );</p><p style="margin: 0px ; margin-left: 4px">    void sw( addr_t addr, uint32_t word32 );</p><p style="margin: 0px ; margin-left: 4px">    void sd( addr_t addr, uint64_t word64 );  // rv64i</p></div></foreignObject><text x="244" y="270" fill="#000000" text-anchor="middle" font-size="12px" font-family="Courier New">[Not supported by viewer]</text></switch></g><rect x="1530" y="0" width="320" height="80" fill="#ffffff" stroke="#000000" stroke-width="2" pointer-events="none"/><g transform="translate(1597.5,26.5)scale(2)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="91" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: &quot;Courier New&quot;; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">namespace <b>isa</b></div></div></foreignObject><text x="46" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Courier New">namespace &lt;b&gt;isa&lt;/b&gt;</text></switch></g><path d="M 795.29 159.76 L 795.29 139.76 Q 795.29 119.76 815.29 119.76 L 1589.41 119.76 Q 1609.41 119.76 1609.41 106.13 L 1609.41 92.5" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1609.41 82 L 1616.41 96 L 1609.41 92.5 L 1602.41 96 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1689.41 550.35 L 1689.41 92.5" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1689.41 82 L 1696.41 96 L 1689.41 92.5 L 1682.41 96 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1061.18 1079.76 L 1187.26 1079.76" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1197.76 1079.76 L 1183.76 1086.76 L 1187.26 1079.76 L 1183.76 1072.76 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><rect x="370" y="0" width="320" height="80" fill="#ffffff" stroke="#000000" stroke-width="2" pointer-events="none"/><g transform="translate(409.5,26.5)scale(2)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="119" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: &quot;Courier New&quot;; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">namespace <b>decoder</b></div></div></foreignObject><text x="60" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Courier New">namespace &lt;b&gt;decoder&lt;/b&gt;</text></switch></g><path d="M 529.41 159.76 L 529.41 92.5" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 529.41 82 L 536.41 96 L 529.41 92.5 L 522.41 96 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><rect x="450" y="2080" width="160" height="80" fill="#ffffff" stroke="#000000" stroke-width="2" pointer-events="none"/><g transform="translate(500.5,2106.5)scale(2)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="28" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: &quot;Courier New&quot;; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><b>main</b><br /></div></div></foreignObject><text x="14" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Courier New">[Not supported by viewer]</text></switch></g><path d="M 529.41 2079.76 L 529.45 2012.74" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 529.46 2002.24 L 536.45 2016.24 L 529.45 2012.74 L 522.45 2016.23 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 689.41 39.76 L 1516.68 39.76" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><path d="M 1527.18 39.76 L 1513.18 46.76 L 1516.68 39.76 L 1513.18 32.76 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/></g></svg>